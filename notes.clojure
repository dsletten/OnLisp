Chapter 2
============================================================================
☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
============================================================================
240430 火
§2.3
13 页 apply vs. funcall

Graham shows these as having "the same effect":
(+ 1 2)
(apply + '(1 2))
(apply @#'+ '(1 2))
(apply (fn [x y] (+ x y)) '(1 2))

vs.
(apply + '(1 2 3))
(apply (fn [x y] (+ x y)) '(1 2 3))

Variations:
(apply + 1 '(2 3))
(apply + 1 2'(3))
(apply + 1 2 3 '())

(let [add +]
  (apply add '(1 2 3)))
----------------------------------------------------------------------------
另见 funcall
(No need for FUNCALL in Scheme/Clojure)
(defun foo (x)
  (+ x 9))

(defun bar (f x)
  (funcall f x))

(bar #'foo 8) => 17

vs.

(defn foo [x]
  (+ x 9))

(defn bar [f x]
  (f x))

(bar foo 8) => 17
----------------------------------------------------------------------------
Head scratchers: (Lisp I APPLY notes 279 页)
(apply apply + 7 9 '() '())
(apply apply (list + 7 9 '()))
(apply apply + '((7 9)))
(apply apply (list + '(7 9)))
(apply apply (cons + '((7 9))))

vs.

(apply apply '(+ (7 9)))
I.e.,
(apply apply '+ '((7 9)))
(apply '+ '(7 9))
('+ 7 9)

(get 7 '+ 9) => 9

Symbol used as function behaves just like keyword:
({:a 7} :b 9)
(:b {:a 7} 9)
({'* 7} '+ 9)
('+ {'* 7} 9)

(class 's) => clojure.lang.Symbol
(ancestors *1) => 
#{clojure.lang.IMeta clojure.lang.AFn clojure.lang.IObj
  java.lang.Object clojure.lang.IHashEq clojure.lang.Named
  java.lang.Comparable clojure.lang.IFn java.io.Serializable
  java.lang.Runnable java.util.concurrent.Callable}

(eval '(+ 7 9))
(eval '(apply + (7 9)))
(eval '(apply + '(7 9)))
----------------------------------------------------------------------------
240501 水
(defn remove-if [f l]
  (cond (empty? l) '()
        (f (first l)) (remove-if f (rest l))
        :else (cons (first l) (remove-if f (rest l)))))

(remove-if even? '(1 2 3 4 5)) => (1 3 5)
(remove-if even? [1 2 3 4 5]) => (1 3 5)

(defn remove-if [f l]
  (if (empty? l)
    '()
    (let [[first & rest] l]
      (if (f first)
        (remove-if f rest)
        (cons first (remove-if f rest))))))

(clojure.repl/source remove)
(defn remove
  "Returns a lazy sequence of the items in coll for which
  (pred item) returns logical false. pred must be free of side-effects.
  Returns a transducer when no collection is provided."
  {:added "1.0"
   :static true}
  ([pred] (filter (complement pred)))
  ([pred coll]
     (filter (complement pred) coll)))
----------------------------------------------------------------------------
240502 木
Dynamic bindings

Lexical (Static Vars) by default
(let [y 7]
  (defn g [x]
    (list x y)))

(let [y 5]
  (g 3))
=> (3 7)

(def ^:dynamic z 2)
(defn f [x]
  (list x z))

(f 3) => (3 2)

(binding [z 99]
  (f 3))
=> (3 99)

;;; ???
(defn h [^:dynamic z]
  (f z))

(h 2) => (2 2)




(defn f [x]
  (letfn [(g [] (- x 2))
          (h [x] (/ x (g)))]
    (+ (g) (h (* 4 x)))))

(f 8) => 34/3
(f 1) => -5




;(def ^:dynamic x 0)
(defn f* [^:dynamic x]
  (letfn [(g* [] (- x 2))
          (h* [^:dynamic x] (/ x (g*)))]
    (+ (g*) (h* (* 4 x)))))

(f* 8)
34/3
(f* 1)
-5
----------------------------------------------------------------------------
240503 金
????????????????????

Only one special variable ever exists at a given moment.
(defn foo [x]
  #(print x))

(def ^:dynamic x)
(defn bar [^:dynamic x]
  #(print x))

(def lexical (list (foo 2) (foo 3) (foo 4)))
(def dynamic (list (bar 2) (bar 3) (bar 4)))

(doseq [lex lexical] (lex))

(binding [x 99]
  (doseq [dyn dynamic]
    (dyn)))
----------------------------------------------------------------------------
240503 金
Taxed operators

Transients
assoc!
dissoc!
conj!
disj!

Atoms
swap!
swap-vals! [old new]
reset!
reset-vals! [old new]

Metadata
alter-meta!  (swap)
reset-meta!

compare-and-set!
io!
persistent!
pop!
run!

set-agent-send-executor!
set-agent-send-off-executor!

set-error-handler!
set-error-mode!

set-validator!

volatile!
vreset!
vswap!

Chapter 4
============================================================================
☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
============================================================================
(def nicknames '{thomas (tom tommy)
                 robert (rob bob bobbie)
                 theodore (theo ted)
                 catherine (kate cathy)
                 david (dave davey)
                 edward (ed)
                 michael (mike)
                 elizabeth (liz lisa lizzie)})

(defn get-nicknames
  "Get all of the nicknames for a given NAME."
  [name]
  (nicknames name))

Naive:
(defn all-nicknames
  "Collect all of the nicknames for the specified NAMES."
  [names]
  (if (empty? names)
      '()
      (concat (nicknames (first names)) (all-nicknames (rest names)))) )

(all-nicknames '(edward theodore catherine)) => (ed theo ted kate cathy)

(defn all-nicknames
  "Collect all of the nicknames for the specified NAMES."
  [names]
  (mapcat get-nicknames names))





